import java.util.*;

public class BFSExample {
    
    // BFS function
    public static void BFS(List<List<Integer>> graph, int start){
        boolean[] visited = new boolean[graph.size()]; // track visited nodes
        Queue<Integer> queue = new LinkedList<>();     // queue for BFS
        queue.add(start);
        visited[start] = true;

        while(!queue.isEmpty()){
            int node = queue.poll();                  // take front node from queue
            System.out.print(node + " ");            // process node (print)

            // add unvisited neighbors to queue
            for(int neighbor : graph.get(node)){
                if(!visited[neighbor]){
                    visited[neighbor] = true;       // mark neighbor visited
                    queue.add(neighbor);            // add neighbor to queue
                }
            }
        }
    }

    public static void main(String[] args){
        int n = 4; // number of nodes
        List<List<Integer>> graph = new ArrayList<>();
        for(int i=0;i<n;i++) graph.add(new ArrayList<>());

        // Creating the graph
        graph.get(0).add(1);
        graph.get(0).add(2);
        graph.get(1).add(3);
        graph.get(2).add(3);

        BFS(graph, 0); // Output: 0 1 2 3
    }
}
